print 'hello, world!'

len()
str()
int()
float()

s = 123
s = str(s)

b = (4==4)
print b

#Python is weakly typed. Type as in data type.
#Example: s = "123" is a string but can do s * 4
#Can use single or double quote, doesn't matter as long as you are consistent
#variable is a pointer to a value
#left is name, right is value
#variabels have semantic value...should be clear and easy to understand/read
#Three types of variables: change constantly, constants, changes rarely
#constants generally in uppercase, something you don't want to change


grocery_list = ('apple', 'orange', 'banana')
for item in grocery_list:
	print item
	
# can use ''' multiline string as comment to define a function and Python help function
#Most people use single line comments
#expressions...mathematical expressions...reduce to a single value
#statements change your program
#some statements, like if, for, while, etc, need the colon
#operator takes input and gives you output, most are binary, do not have unary operators
# ** is exponent, + - * / == += -= *= /=
#index [] starts at 0, measure in offsets if name is matthew, how many offsets do you have to go to get m, 0
glist = 'milk eggs'
glist += ' bread'
#glist[0] = m
#to get last character [-1] starts at offset 0 = m and goes in the other direction
#index slicing[start:end:step] end goes up to but not including 
#if no start provided [:] start is 0, if no end provided [::] end is the end
#to reverse string [::-1], useful for a palindrome detector
#variable. and tab gives you list of functions you can run

#reading for this week: python tutorial on lists

Week 2:
-week 1 assignment
-conditionals
-writing our own functions
-debugging
-very simple blog backend

\ is a contiuation character to break to next line
.split() with no arguements uses whitespace
a set is a list of unique items
Trim can be done using translate
much easier to replace
Strings are immutable but when you use s.replace() it doesn't permanently change s
s = 'abc"
s.replace('a','x')
->'xbc'
s
->'abc'

s = list s and list will have same id/reference each other. changing 1 will change the other
s = list[:] sets s = to the elements/values in list

list is ordered, a set is not an ordered collection

join is a function attached to a string; can be used on a string and only on a string
	takes in a list or some sort of sequence of unique elements and joins them with the preceding string
	" ".join("this","is","a","sentence") = this is a sentence
	
strings are immutable but lists are...so to insert something into a string convert to list, insert, convert back to string

contiionals: like an if statement

Python doesn't use brackets/()/etc to evaluate conditionals, it uses whitespace (indentations)

for loop

if
elif
else

while, like if, will run if condition is true

lists
append adds a single item
extend adds all items individually


Week 3
.format() is a string mehod
l = [1,23,49]
"{} {} {}".format(l[0],l[1],l[2])
-->'1 23 49'
.join() is a string method
names = ['Robert Frost','Micahel Jordan','Malcom X']
", ".join(names)
-->'Robert Frost, Michael Jordan, Malcom X'
.join() can be helpful for parsing csv files
", ".join(name for name in names) #for loop, gives more control over the join because targets each name
", ".join(name[::-1] for names in names) reverse each item
"|".join(name.ljust(15) for name in names)

reverse a list = list.reverse() or list[::-1]
[stop:start:step]

mutable value = a value that can be permanently changed

list is comma separated collection of values where order is importnat

files
opening a file does not read the file, just opens it
f.readlines() gives you a list
can't read twice, the file has twice so once you read the file it is at the end so trying to read gives you nothing
can chain .readlines to the open command
look into with construct ie. with open('file.csv') = f\n content = f.readlines()

variable defined in for loop not scoped to loop/it sticks arround
l = [1,2,3]
for item in l:
	print item
->1
->2
->3
print item
->3

FUNCTIONS
def func():
	<insert code here>
pure function is one that takes data in and sends data out (mathematical senses)
a useful function should generally return something
nothing can go after return
variables defined in the function are scoped to the function and do not exist outside of the function 
functions help break code out and make it easier to read, avoid having to retype things, makes program more meaningful

programming is binding a name to a value
name = value


Week 4

in python anything is an object and everything can do anything
empty list evaluates to false
dictionarys key to value

SQL_Lite
-schema defines table, inputs, etc = (field DATATYPE, field DATATYPE...)
-convention dictates that id is INTEGER PRIMARY KEY

Week 5
print datetime.datetime(year,month,daty,hour,minute) gives you a readable ouptut
cursor.execute('INSERT INTO reminders (task, date, location, notes, expired) \
    VALUES (?,?,?,?,?)', (task, time_string, location, notes, expired)
  Values ??? prevents injection errors
  
\ means escpae, so to use special characters, i.e. to use " w/in a string would be string = "matthew said, \"this\""
project euler
codeeval
import excel file for code

Week 5
class sorting exercise
to reverse a sort could do either
sorted_words = sorted(words,key=?,reverse=True)
OR
sorted_words = sorted(words,key=?)[::-1]
.sort() is a mutation and returns non
sorted is safer, returns a copy
method is likely to change the actual item vs stand alone function likely to produce a new copy
API = interface for external user to access internal data
create an api, the file can be imported
ipython commands %

try:
   
except:
   in except clause can specify type of error i.e. IndexError
